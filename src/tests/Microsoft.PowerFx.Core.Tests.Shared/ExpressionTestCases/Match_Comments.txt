#SETUP: RegEx,PowerFxV1CompatibilityRules,SupportColumnNamesAsIdentifiers

// Comments and free spacing behavior in Power Fx regular expressions.
//
//  Effective                       Usage                                  .NET        ECMAScript        PCRE2
// =====================================================================================================================================
//  (?# ...)                        Inline comment                         Yes         No                Yes
//  "x" option                      space insiginificant and # comments    Yes         No                Yes

// Inline comments

>> Match( "test", "(?# this is a test)st" )
{FullMatch:"st",StartMatch:3}

>> Match( "test", "(?# this is a test ( with an open paren )st" )
Errors: Error 15-60: Invalid regular expression: Inline comments cannot include open parenthesis, found in "(?# this is a test ( with an open paren )".|Error 0-5: The function 'Match' has some invalid arguments.

>> Match( "test", "(?# this is a test \) with an escaped close paren )st" )  // can't escape a paren in an inline comment
Errors: Error 15-70: Invalid regular expression: Unopened groups, too few opening parenthesis.|Error 0-5: The function 'Match' has some invalid arguments.

// Free spacing with different newline characters between

>> Match( "atestz", "(?x)
 # this is free spacing!

 t

 e # e is for elephant

 s

 t # t is for terminte

 ").FullMatch
"test"

>> Match( "atestz", "(?x)" &Char(13)& "# this is free spacing!" &Char(13)&Char(13)& "t" &Char(13)&Char(13) & "e # e is for elephant" &Char(13)&Char(13)& "s" &Char(13)&Char(13)& "t # t is for terminte" &Char(13)&Char(13)).FullMatch
"test"

>> Match( "atestz", "(?x)" &Char(13)& "# this is free spacing!" &Char(10)&Char(10)& "t" &Char(10)&Char(10) & "e # e is for elephant" &Char(10)&Char(10)& "s" &Char(13)&Char(13)& "t # t is for terminte" &Char(10)&Char(10)).FullMatch
"test"

>> Match( "atestz", "(?x)" &Char(13)&Char(10)& "# this is free spacing!" &Char(13)&Char(10)&Char(13)&Char(10)& "t" &Char(13)&Char(10)&Char(13)&Char(10)& "e # e is for elephant" &Char(13)&Char(10)&Char(13)&Char(10)& "s" &Char(13)&Char(10)&Char(13)&Char(10)& "t # t is for terminte" &Char(13)&Char(10)&Char(13)&Char(10)).FullMatch
"test"

>> Match( "atestz", "(?x)" &Char(13)& "# this is free spacing!" &Char(13)& "t" &Char(13)& "e # e is for elephant" &Char(13)& "s" &Char(13)& "t # t is for terminte").FullMatch
"test"

>> Match( "atestz", "(?x)" &Char(13)& "# this is free spacing!" &Char(10)& "t" &Char(10)& "e # e is for elephant" &Char(10)& "s" &Char(10)& "t # t is for terminte" &Char(10)).FullMatch
"test"

>> Match( "atestz", "(?x)" &Char(13)&Char(10)& "# this is free spacing!" &Char(13)&Char(10)& "t" &Char(13)&Char(10)& "e # e is for elephant" &Char(13)&Char(10)& "s" &Char(13)&Char(10)& "t # t is for terminte" &Char(13)&Char(10)).FullMatch
"test"

>> IsMatch( "ab", "(?x)a # b" )
false

>> IsMatch( "ab", "(?x)a # " &Char(13)& " b" )
true

>> IsMatch( "ab", "(?x)a # " &Char(10)& " b" )
true

>> IsMatch( "ab", "(?x)a # " &Char(13)&Char(10)& " b" )  // one is the newline, the other is just whitespace that is ignored
true

>> IsMatch( "ab", "(?x)a # " &Char(133)& " b" )  // \x85
false

// MatchOptions.Contains doesn't strip free spacing on PCRE2, good to compare results

>> IsMatch( "ab", "(?x)a # c", MatchOptions.Contains )
true

>> IsMatch( "ab", "(?x)a # " &Char(13)& " c", MatchOptions.Contains )
false

>> IsMatch( "ab", "(?x)a # " &Char(10)& " c", MatchOptions.Contains )
false

>> IsMatch( "ab", "(?x)a # " &Char(13)&Char(10)& " c", MatchOptions.Contains )  // one is the newline, the other is just whitespace that is ignored
false

>> IsMatch( "ab", "(?x)a # " &Char(133)& " c", MatchOptions.Contains )  // \x85
true

>> IsMatch( "ab", "(?x)a # " &Char(12)& " c", MatchOptions.Contains )   // \f
true

>> IsMatch( "ab", "(?x)a # " &Char(11)& " c", MatchOptions.Contains )   // \v
true

>> IsMatch( "ab", "(?x)a # " &Char(9)& " c", MatchOptions.Contains )    // \h
true

>> IsMatch( "ab", "(?x)a # " &UniChar(2028)& " c", MatchOptions.Contains )  // \u2028
true

>> IsMatch( "ab", "(?x)a # " &UniChar(2029)& " c", MatchOptions.Contains )  // \u2029
true

