#SETUP: RegEx,PowerFxV1CompatibilityRules,SupportColumnNamesAsIdentifiers

// Unicode character behavior in Power Fx regular expressions.
//
//  Effective                                        Usage                        .NET        ECMAScript       PCRE2
// =====================================================================================================================================
//  \p{Ll}\p{Lu}\p{Lt}\p{Lo}\p{Lm}\p{Nd}\p{Pc}       \w, \W, \b, \B               Yes         No               Yes
//  \p{Nd}                                           \d, \D                       Yes         No               Yes
//  \p{Category}                                     \p, \P                       Yes         Yes              Yes
//  \p{Script}                                       \p, \P                       Yes         Yes              Yes
//
// We chose to use canonical .NET instead of RegexOptions.ECMAScript because we wanted the unicode definitions for words.
// See https://learn.microsoft.com/dotnet/standard/base-types/regular-expression-options#ecmascript-matching-behavior for more details

// Unicode letters as word characters are matched

>> Match( "the whole world", "\b(\w+\s*)+" )
{FullMatch:"the whole world",StartMatch:1}

>> Match( "целый мир", "\b(\w+\s*)+" )
{FullMatch:"целый мир",StartMatch:1}

>> Match( "el niño", "\b(\w+\s*)+" )
{FullMatch:"el niño",StartMatch:1}

>> Match( "Müller", "^\w+$" )
{FullMatch:"Müller",StartMatch:1}

// Unicode numbers as digits are matched

>> Match( "12345", "^\d+$" )
{FullMatch:"12345",StartMatch:1}

>> Match( "12٤45", "^\d+$" )
{FullMatch:"12٤45",StartMatch:1}

>> Match( "123४5", "^\d+$" )
{FullMatch:"123४5",StartMatch:1}

>> Match( "abc3d", "^\D+" )
{FullMatch:"abc",StartMatch:1}

>> Match( "abc٤45", "^\D+" )
{FullMatch:"abc",StartMatch:1}

>> Match( "abc४5", "^\D+" )
{FullMatch:"abc",StartMatch:1}

// Changes in case insensitive matching in .NET 7 causes different answers that are consistent with PCRE2 and Node
// See https://devblogs.microsoft.com/dotnet/regular-expression-improvements-in-dotnet-7/#case-insensitive-matching-and-regexoptions-ignorecase

>> Match( UniChar(Hex2Dec("03a9")), "\u03c9", MatchOptions.IgnoreCase ).FullMatch
"Ω"

>> Match( UniChar(Hex2Dec("03c9")), "\u03a9", MatchOptions.IgnoreCase ).FullMatch
"ω"

#DISABLE.NET:462
>> Match( UniChar(Hex2Dec("03a9")), "\u2126", MatchOptions.IgnoreCase ).FullMatch
"Ω"

#DISABLE.NET:462
>> Match( UniChar(Hex2Dec("03c9")), "\u2126", MatchOptions.IgnoreCase ).FullMatch
"ω"

#DISABLE.NET:462
>> Match( UniChar(Hex2Dec("2126")), "\u03c9", MatchOptions.IgnoreCase ).FullMatch
"Ω"

#DISABLE.NET:462
>> Match( UniChar(Hex2Dec("2126")), "\u03a9", MatchOptions.IgnoreCase ).FullMatch
"Ω"

// L
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{L}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )
"0041,0042,0043,0044,0045,0046,0047,0048-004F,0050-0057,0058,0059,005A,0061,0062,0063,0064,0065,0066,0067,0068-006F,0070-0077,0078,0079,007A,00AA,00B5,00BA,00C0-00C7,00C8-00CF,00D0,00D1,00D2,00D3,00D4,00D5,00D6,00D8-00DF,00E0-00E7,00E8-00EF,00F0,00F1,00F2,00F3,00F4,00F5,00F6,00F8-00FF,0100-0107,0108-010F,0110-0117,0118-011F,0120-0127,0128-012F,0130-0137,0138-013F,0140-0147,0148-014F,0150-0157,0158-015F,0160-0167,0168-016F,0170-0177,0178-017F,0180-0187,0188-018F,0190-0197,0198-019F,01A0-01A7,01A8-01AF,01B0-01B7,01B8-01BF,01C0-01C7,01C8-01CF,01D0-01D7,01D8-01DF,01E0-01E7,01E8-01EF,01F0-01F7,01F8-01FF,0200-0207,0208-020F,0210-0217,0218-021F,0220-0227,0228-022F,0230-0237,0238-023F,0240-0247,0248-024F,0250-0257,0258-025F,0260-0267,0268-026F,0270-0277,0278-027F,0280-0287,0288-028F,0290-0297,0298-029F,02A0-02A7,02A8-02AF,02B0-02B7,02B8-02BF,02C0,02C1,02C6,02C7,02C8-02CF,02D0,02D1,02E0,02E1,02E2,02E3,02E4,02EC,02EE,0370,0371,0372,0373,0374,0376,0377,037A,037B,037C,037D,037F,0386,0388,0389,038A,038C,038E,038F,0390-0397,0398-039F,03A0,03A1,03A3,03A4,03A5,03A6,03A7,03A8-03AF,03B0-03B7,03B8-03BF,03C0-03C7,03C8-03CF,03D0-03D7,03D8-03DF,03E0-03E7,03E8-03EF,03F0,03F1,03F2,03F3,03F4,03F5,03F7,03F8-03FF,0400-0407,0408-040F,0410-0417,0418-041F,0420-0427,0428-042F,0430-0437,0438-043F,0440-0447,0448-044F,0450-0457,0458-045F,0460-0467,0468-046F,0470-0477,0478-047F,0480,0481,048A,048B,048C,048D,048E,048F,0490-0497,0498-049F,04A0-04A7,04A8-04AF,04B0-04B7,04B8-04BF,04C0-04C7,04C8-04CF,04D0-04D7,04D8-04DF,04E0-04E7,04E8-04EF,04F0-04F7,04F8-04FF,0500-0507,0508-050F,0510-0517,0518-051F,0520-0527,0528-052F,0531,0532,0533,0534,0535,0536,0537,0538-053F,0540-0547,0548-054F,0550,0551,0552,0553,0554,0555,0556,0559,0560-0567,0568-056F,0570-0577,0578-057F,0580-0587,0588,05D0-05D7,05D8-05DF,05E0-05E7,05E8,05E9,05EA,05EF,05F0,05F1,05F2,0620-0627,0628-062F,0630-0637,0638-063F,0640-0647,0648,0649,064A,066E,066F,0671,0672,0673,0674,0675,0676,0677,0678-067F,0680-0687,0688-068F,0690-0697,0698-069F,06A0-06A7,06A8-06AF,06B0-06B7,06B8-06BF,06C0-06C7,06C8-06CF,06D0,06D1,06D2,06D3,06D5,06E5,06E6,06EE,06EF,06FA,06FB,06FC,06FF,0710,0712,0713,0714,0715,0716,0717,0718-071F,0720-0727,0728-072F,074D,074E,074F,0750-0757,0758-075F,0760-0767,0768-076F,0770-0777,0778-077F,0780-0787,0788-078F,0790-0797,0798-079F,07A0,07A1,07A2,07A3,07A4,07A5,07B1,07CA,07CB,07CC,07CD,07CE,07CF,07D0-07D7,07D8-07DF,07E0-07E7,07E8,07E9,07EA,07F4,07F5,07FA,0800-0807,0808-080F,0810,0811,0812,0813,0814,0815,081A,0824,0828,0840-0847,0848-084F,0850-0857,0858,0860-0867,0868,0869,086A,0870-0877,0878-087F,0880-0887,0889,088A,088B,088C,088D,088E,08A0-08A7,08A8-08AF,08B0-08B7,08B8-08BF,08C0-08C7,08C8,08C9,0904,0905,0906,0907,0908-090F,0910-0917,0918-091F,0920-0927,0928-092F,0930-0937,0938,0939,093D,0950,0958-095F,0960,0961,0971,0972,0973,0974,0975,0976,0977,0978-097F,0980,0985,0986,0987,0988,0989,098A,098B,098C,098F,0990,0993,0994,0995,0996,0997,0998-099F,09A0-09A7,09A8,09AA,09AB,09AC,09AD,09AE,09AF,09B0,09B2,09B6,09B7,09B8,09B9,09BD,09CE,09DC,09DD,09DF,09E0,09E1,09F0,09F1,09FC,0A05,0A06,0A07,0A08,0A09,0A0A,0A0F,0A10,0A13,0A14,0A15,0A16,0A17,0A18-0A1F,0A20-0A27,0A28,0A2A,0A2B,0A2C,0A2D,0A2E,0A2F,0A30,0A32,0A33,0A35,0A36,0A38,0A39,0A59,0A5A,0A5B,0A5C,0A5E,0A72,0A73,0A74,0A85,0A86,0A87,0A88,0A89,0A8A,0A8B,0A8C,0A8D,0A8F,0A90,0A91,0A93,0A94,0A95,0A96,0A97,0A98-0A9F,0AA0-0AA7,0AA8,0AAA,0AAB,0AAC,0AAD,0AAE,0AAF,0AB0,0AB2,0AB3,0AB5,0AB6,0AB7,0AB8,0AB9,0ABD,0AD0,0AE0,0AE1,0AF9,0B05,0B06,0B07,0B08,0B09,0B0A,0B0B,0B0C,0B0F,0B10,0B13,0B14,0B15,0B16,0B17,0B18-0B1F,0B20-0B27,0B28,0B2A,0B2B,0B2C,0B2D,0B2E,0B2F,0B30,0B32,0B33,0B35,0B36,0B37,0B38,0B39,0B3D,0B5C,0B5D,0B5F,0B60,0B61,0B71,0B83,0B85,0B86,0B87,0B88,0B89,0B8A,0B8E,0B8F,0B90,0B92,0B93,0B94,0B95,0B99,0B9A,0B9C,0B9E,0B9F,0BA3,0BA4,0BA8,0BA9,0BAA,0BAE,0BAF,0BB0-0BB7,0BB8,0BB9,0BD0,0C05,0C06,0C07,0C08,0C09,0C0A,0C0B,0C0C,0C0E,0C0F,0C10,0C12,0C13,0C14,0C15,0C16,0C17,0C18-0C1F,0C20-0C27,0C28,0C2A,0C2B,0C2C,0C2D,0C2E,0C2F,0C30-0C37,0C38,0C39,0C3D,0C58,0C59,0C5A,0C5D,0C60,0C61,0C80,0C85,0C86,0C87,0C88,0C89,0C8A,0C8B,0C8C,0C8E,0C8F,0C90,0C92,0C93,0C94,0C95,0C96,0C97,0C98-0C9F,0CA0-0CA7,0CA8,0CAA,0CAB,0CAC,0CAD,0CAE,0CAF,0CB0,0CB1,0CB2,0CB3,0CB5,0CB6,0CB7,0CB8,0CB9,0CBD,0CDD,0CDE,0CE0,0CE1,0CF1,0CF2,0D04,0D05,0D06,0D07,0D08,0D09,0D0A,0D0B,0D0C,0D0E,0D0F,0D10,0D12,0D13,0D14,0D15,0D16,0D17,0D18-0D1F,0D20-0D27,0D28-0D2F,0D30-0D37,0D38,0D39,0D3A,0D3D,0D4E,0D54,0D55,0D56,0D5F,0D60,0D61,0D7A,0D7B,0D7C,0D7D,0D7E,0D7F,0D85,0D86,0D87,0D88-0D8F,0D90,0D91,0D92,0D93,0D94,0D95,0D96,0D9A,0D9B,0D9C,0D9D,0D9E,0D9F,0DA0-0DA7,0DA8-0DAF,0DB0,0DB1,0DB3,0DB4,0DB5,0DB6,0DB7,0DB8,0DB9,0DBA,0DBB,0DBD,0DC0,0DC1,0DC2,0DC3,0DC4,0DC5,0DC6,0E01,0E02,0E03,0E04,0E05,0E06,0E07,0E08-0E0F,0E10-0E17,0E18-0E1F,0E20-0E27,0E28-0E2F,0E30,0E32,0E33,0E40,0E41,0E42,0E43,0E44,0E45,0E46,0E81,0E82,0E84,0E86,0E87,0E88,0E89,0E8A,0E8C,0E8D,0E8E,0E8F,0E90-0E97,0E98-0E9F,0EA0,0EA1,0EA2,0EA3,0EA5,0EA7,0EA8-0EAF,0EB0,0EB2,0EB3,0EBD,0EC0,0EC1,0EC2,0EC3,0EC4,0EC6,0EDC,0EDD,0EDE,0EDF,0F00,0F40-0F47,0F49,0F4A,0F4B,0F4C,0F4D,0F4E,0F4F,0F50-0F57,0F58-0F5F,0F60-0F67,0F68,0F69,0F6A,0F6B,0F6C,0F88,0F89,0F8A,0F8B,0F8C,1000-1007,1008-100F,1010-1017,1018-101F,1020-1027,1028,1029,102A,103F,1050,1051,1052,1053,1054,1055,105A,105B,105C,105D,1061,1065,1066,106E,106F,1070,1075,1076,1077,1078-107F,1080,1081,108E,10A0-10A7,10A8-10AF,10B0-10B7,10B8-10BF,10C0,10C1,10C2,10C3,10C4,10C5,10C7,10CD,10D0-10D7,10D8-10DF,10E0-10E7,10E8-10EF,10F0-10F7,10F8,10F9,10FA,10FC,10FD,10FE,10FF,1100-1107,1108-110F,1110-1117,1118-111F,1120-1127,1128-112F,1130-1137,1138-113F,1140-1147,1148-114F,1150-1157,1158-115F,1160-1167,1168-116F,1170-1177,1178-117F,1180-1187,1188-118F,1190-1197,1198-119F,11A0-11A7,11A8-11AF,11B0-11B7,11B8-11BF,11C0-11C7,11C8-11CF,11D0-11D7,11D8-11DF,11E0-11E7,11E8-11EF,11F0-11F7,11F8-11FF,1200-1207,1208-120F,1210-1217,1218-121F,1220-1227,1228-122F,1230-1237,1238-123F,1240-1247,1248,124A,124B,124C,124D,1250,1251,1252,1253,1254,1255,1256,1258,125A,125B,125C,125D,1260-1267,1268-126F,1270-1277,1278-127F,1280-1287,1288,128A,128B,128C,128D,1290-1297,1298-129F,12A0-12A7,12A8-12AF,12B0,12B2,12B3,12B4,12B5,12B8,12B9,12BA,12BB,12BC,12BD,12BE,12C0,12C2,12C3,12C4,12C5,12C8-12CF,12D0,12D1,12D2,12D3,12D4,12D5,12D6,12D8-12DF,12E0-12E7,12E8-12EF,12F0-12F7,12F8-12FF,1300-1307,1308-130F,1310,1312,1313,1314,1315,1318-131F,1320-1327,1328-132F,1330-1337,1338-133F,1340-1347,1348-134F,1350-1357,1358,1359,135A,1380-1387,1388-138F,13A0-13A7,13A8-13AF,13B0-13B7,13B8-13BF,13C0-13C7,13C8-13CF,13D0-13D7,13D8-13DF,13E0-13E7,13E8-13EF,13F0,13F1,13F2,13F3,13F4,13F5,13F8,13F9,13FA,13FB,13FC,13FD,1401,1402,1403,1404,1405,1406,1407,1408-140F,1410-1417,1418-141F,1420-1427,1428-142F,1430-1437,1438-143F,1440-1447,1448-144F,1450-1457,1458-145F,1460-1467,1468-146F,1470-1477,1478-147F,1480-1487,1488-148F,1490-1497,1498-149F,14A0-14A7,14A8-14AF,14B0-14B7,14B8-14BF,14C0-14C7,14C8-14CF,14D0-14D7,14D8-14DF,14E0-14E7,14E8-14EF,14F0-14F7,14F8-14FF,1500-1507,1508-150F,1510-1517,1518-151F,1520-1527,1528-152F,1530-1537,1538-153F,1540-1547,1548-154F,1550-1557,1558-155F,1560-1567,1568-156F,1570-1577,1578-157F,1580-1587,1588-158F,1590-1597,1598-159F,15A0-15A7,15A8-15AF,15B0-15B7,15B8-15BF,15C0-15C7,15C8-15CF,15D0-15D7,15D8-15DF,15E0-15E7,15E8-15EF,15F0-15F7,15F8-15FF,1600-1607,1608-160F,1610-1617,1618-161F,1620-1627,1628-162F,1630-1637,1638-163F,1640-1647,1648-164F,1650-1657,1658-165F,1660-1667,1668,1669,166A,166B,166C,166F,1670-1677,1678-167F,1681,1682,1683,1684,1685,1686,1687,1688-168F,1690-1697,1698,1699,169A,16A0-16A7,16A8-16AF,16B0-16B7,16B8-16BF,16C0-16C7,16C8-16CF,16D0-16D7,16D8-16DF,16E0-16E7,16E8,16E9,16EA,16F1,16F2,16F3,16F4,16F5,16F6,16F7,16F8,1700-1707,1708-170F,1710,1711,171F,1720-1727,1728-172F,1730,1731,1740-1747,1748-174F,1750,1751,1760-1767,1768,1769,176A,176B,176C,176E,176F,1770,1780-1787,1788-178F,1790-1797,1798-179F,17A0-17A7,17A8-17AF,17B0,17B1,17B2,17B3,17D7,17DC,1820-1827,1828-182F,1830-1837,1838-183F,1840-1847,1848-184F,1850-1857,1858-185F,1860-1867,1868-186F,1870-1877,1878,1880,1881,1882,1883,1884,1887,1888-188F,1890-1897,1898-189F,18A0-18A7,18A8,18AA,18B0-18B7,18B8-18BF,18C0-18C7,18C8-18CF,18D0-18D7,18D8-18DF,18E0-18E7,18E8-18EF,18F0,18F1,18F2,18F3,18F4,18F5,1900-1907,1908-190F,1910-1917,1918,1919,191A,191B,191C,191D,191E,1950-1957,1958-195F,1960-1967,1968,1969,196A,196B,196C,196D,1970,1971,1972,1973,1974,1980-1987,1988-198F,1990-1997,1998-199F,19A0-19A7,19A8,19A9,19AA,19AB,19B0-19B7,19B8-19BF,19C0-19C7,19C8,19C9,1A00-1A07,1A08-1A0F,1A10,1A11,1A12,1A13,1A14,1A15,1A16,1A20-1A27,1A28-1A2F,1A30-1A37,1A38-1A3F,1A40-1A47,1A48-1A4F,1A50,1A51,1A52,1A53,1A54,1AA7,1B05,1B06,1B07,1B08-1B0F,1B10-1B17,1B18-1B1F,1B20-1B27,1B28-1B2F,1B30,1B31,1B32,1B33,1B45,1B46,1B47,1B48,1B49,1B4A,1B4B,1B4C,1B83,1B84,1B85,1B86,1B87,1B88-1B8F,1B90-1B97,1B98-1B9F,1BA0,1BAE,1BAF,1BBA,1BBB,1BBC,1BBD,1BBE,1BBF,1BC0-1BC7,1BC8-1BCF,1BD0-1BD7,1BD8-1BDF,1BE0,1BE1,1BE2,1BE3,1BE4,1BE5,1C00-1C07,1C08-1C0F,1C10-1C17,1C18-1C1F,1C20,1C21,1C22,1C23,1C4D,1C4E,1C4F,1C5A,1C5B,1C5C,1C5D,1C5E,1C5F,1C60-1C67,1C68-1C6F,1C70-1C77,1C78,1C79,1C7A,1C7B,1C7C,1C7D,1C80-1C87,1C88,1C90-1C97,1C98-1C9F,1CA0-1CA7,1CA8-1CAF,1CB0-1CB7,1CB8,1CB9,1CBA,1CBD,1CBE,1CBF,1CE9,1CEA,1CEB,1CEC,1CEE,1CEF,1CF0,1CF1,1CF2,1CF3,1CF5,1CF6,1CFA,1D00-1D07,1D08-1D0F,1D10-1D17,1D18-1D1F,1D20-1D27,1D28-1D2F,1D30-1D37,1D38-1D3F,1D40-1D47,1D48-1D4F,1D50-1D57,1D58-1D5F,1D60-1D67,1D68-1D6F,1D70-1D77,1D78-1D7F,1D80-1D87,1D88-1D8F,1D90-1D97,1D98-1D9F,1DA0-1DA7,1DA8-1DAF,1DB0-1DB7,1DB8-1DBF,1E00-1E07,1E08-1E0F,1E10-1E17,1E18-1E1F,1E20-1E27,1E28-1E2F,1E30-1E37,1E38-1E3F,1E40-1E47,1E48-1E4F,1E50-1E57,1E58-1E5F,1E60-1E67,1E68-1E6F,1E70-1E77,1E78-1E7F,1E80-1E87,1E88-1E8F,1E90-1E97,1E98-1E9F,1EA0-1EA7,1EA8-1EAF,1EB0-1EB7,1EB8-1EBF,1EC0-1EC7,1EC8-1ECF,1ED0-1ED7,1ED8-1EDF,1EE0-1EE7,1EE8-1EEF,1EF0-1EF7,1EF8-1EFF,1F00-1F07,1F08-1F0F,1F10,1F11,1F12,1F13,1F14,1F15,1F18,1F19,1F1A,1F1B,1F1C,1F1D,1F20-1F27,1F28-1F2F,1F30-1F37,1F38-1F3F,1F40,1F41,1F42,1F43,1F44,1F45,1F48,1F49,1F4A,1F4B,1F4C,1F4D,1F50-1F57,1F59,1F5B,1F5D,1F5F,1F60-1F67,1F68-1F6F,1F70-1F77,1F78,1F79,1F7A,1F7B,1F7C,1F7D,1F80-1F87,1F88-1F8F,1F90-1F97,1F98-1F9F,1FA0-1FA7,1FA8-1FAF,1FB0,1FB1,1FB2,1FB3,1FB4,1FB6,1FB7,1FB8,1FB9,1FBA,1FBB,1FBC,1FBE,1FC2,1FC3,1FC4,1FC6,1FC7,1FC8,1FC9,1FCA,1FCB,1FCC,1FD0,1FD1,1FD2,1FD3,1FD6,1FD7,1FD8,1FD9,1FDA,1FDB,1FE0-1FE7,1FE8,1FE9,1FEA,1FEB,1FEC,1FF2,1FF3,1FF4,1FF6,1FF7,1FF8,1FF9,1FFA,1FFB,1FFC,"

// Ll
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Ll}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )
"0061,0062,0063,0064,0065,0066,0067,0068-006F,0070-0077,0078,0079,007A,00B5,00DF,00E0-00E7,00E8-00EF,00F0,00F1,00F2,00F3,00F4,00F5,00F6,00F8-00FF,0101,0103,0105,0107,0109,010B,010D,010F,0111,0113,0115,0117,0119,011B,011D,011F,0121,0123,0125,0127,0129,012B,012D,012F,0131,0133,0135,0137,0138,013A,013C,013E,0140,0142,0144,0146,0148,0149,014B,014D,014F,0151,0153,0155,0157,0159,015B,015D,015F,0161,0163,0165,0167,0169,016B,016D,016F,0171,0173,0175,0177,017A,017C,017E,017F,0180,0183,0185,0188,018C,018D,0192,0195,0199,019A,019B,019E,01A1,01A3,01A5,01A8,01AA,01AB,01AD,01B0,01B4,01B6,01B9,01BA,01BD,01BE,01BF,01C6,01C9,01CC,01CE,01D0,01D2,01D4,01D6,01D8,01DA,01DC,01DD,01DF,01E1,01E3,01E5,01E7,01E9,01EB,01ED,01EF,01F0,01F3,01F5,01F9,01FB,01FD,01FF,0201,0203,0205,0207,0209,020B,020D,020F,0211,0213,0215,0217,0219,021B,021D,021F,0221,0223,0225,0227,0229,022B,022D,022F,0231,0233,0234,0235,0236,0237,0238,0239,023C,023F,0240,0242,0247,0249,024B,024D,024F,0250-0257,0258-025F,0260-0267,0268-026F,0270-0277,0278-027F,0280-0287,0288-028F,0290,0291,0292,0293,0295,0296,0297,0298-029F,02A0-02A7,02A8-02AF,0371,0373,0377,037B,037C,037D,0390,03AC,03AD,03AE,03AF,03B0-03B7,03B8-03BF,03C0-03C7,03C8,03C9,03CA,03CB,03CC,03CD,03CE,03D0,03D1,03D5,03D6,03D7,03D9,03DB,03DD,03DF,03E1,03E3,03E5,03E7,03E9,03EB,03ED,03EF,03F0,03F1,03F2,03F3,03F5,03F8,03FB,03FC,0430-0437,0438-043F,0440-0447,0448-044F,0450-0457,0458-045F,0461,0463,0465,0467,0469,046B,046D,046F,0471,0473,0475,0477,0479,047B,047D,047F,0481,048B,048D,048F,0491,0493,0495,0497,0499,049B,049D,049F,04A1,04A3,04A5,04A7,04A9,04AB,04AD,04AF,04B1,04B3,04B5,04B7,04B9,04BB,04BD,04BF,04C2,04C4,04C6,04C8,04CA,04CC,04CE,04CF,04D1,04D3,04D5,04D7,04D9,04DB,04DD,04DF,04E1,04E3,04E5,04E7,04E9,04EB,04ED,04EF,04F1,04F3,04F5,04F7,04F9,04FB,04FD,04FF,0501,0503,0505,0507,0509,050B,050D,050F,0511,0513,0515,0517,0519,051B,051D,051F,0521,0523,0525,0527,0529,052B,052D,052F,0560-0567,0568-056F,0570-0577,0578-057F,0580-0587,0588,10D0-10D7,10D8-10DF,10E0-10E7,10E8-10EF,10F0-10F7,10F8,10F9,10FA,10FD,10FE,10FF,13F8,13F9,13FA,13FB,13FC,13FD,1C80-1C87,1C88,1D00-1D07,1D08-1D0F,1D10-1D17,1D18-1D1F,1D20-1D27,1D28,1D29,1D2A,1D2B,1D6B,1D6C,1D6D,1D6E,1D6F,1D70-1D77,1D79,1D7A,1D7B,1D7C,1D7D,1D7E,1D7F,1D80-1D87,1D88-1D8F,1D90-1D97,1D98,1D99,1D9A,1E01,1E03,1E05,1E07,1E09,1E0B,1E0D,1E0F,1E11,1E13,1E15,1E17,1E19,1E1B,1E1D,1E1F,1E21,1E23,1E25,1E27,1E29,1E2B,1E2D,1E2F,1E31,1E33,1E35,1E37,1E39,1E3B,1E3D,1E3F,1E41,1E43,1E45,1E47,1E49,1E4B,1E4D,1E4F,1E51,1E53,1E55,1E57,1E59,1E5B,1E5D,1E5F,1E61,1E63,1E65,1E67,1E69,1E6B,1E6D,1E6F,1E71,1E73,1E75,1E77,1E79,1E7B,1E7D,1E7F,1E81,1E83,1E85,1E87,1E89,1E8B,1E8D,1E8F,1E91,1E93,1E95,1E96,1E97,1E98,1E99,1E9A,1E9B,1E9C,1E9D,1E9F,1EA1,1EA3,1EA5,1EA7,1EA9,1EAB,1EAD,1EAF,1EB1,1EB3,1EB5,1EB7,1EB9,1EBB,1EBD,1EBF,1EC1,1EC3,1EC5,1EC7,1EC9,1ECB,1ECD,1ECF,1ED1,1ED3,1ED5,1ED7,1ED9,1EDB,1EDD,1EDF,1EE1,1EE3,1EE5,1EE7,1EE9,1EEB,1EED,1EEF,1EF1,1EF3,1EF5,1EF7,1EF9,1EFB,1EFD,1EFF,1F00-1F07,1F10,1F11,1F12,1F13,1F14,1F15,1F20-1F27,1F30-1F37,1F40,1F41,1F42,1F43,1F44,1F45,1F50-1F57,1F60-1F67,1F70-1F77,1F78,1F79,1F7A,1F7B,1F7C,1F7D,1F80-1F87,1F90-1F97,1FA0-1FA7,1FB0,1FB1,1FB2,1FB3,1FB4,1FB6,1FB7,1FBE,1FC2,1FC3,1FC4,1FC6,1FC7,1FD0,1FD1,1FD2,1FD3,1FD6,1FD7,1FE0-1FE7,1FF2,1FF3,1FF4,1FF6,1FF7,"

// Lu
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Lu}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )
"0041,0042,0043,0044,0045,0046,0047,0048-004F,0050-0057,0058,0059,005A,00C0-00C7,00C8-00CF,00D0,00D1,00D2,00D3,00D4,00D5,00D6,00D8,00D9,00DA,00DB,00DC,00DD,00DE,0100,0102,0104,0106,0108,010A,010C,010E,0110,0112,0114,0116,0118,011A,011C,011E,0120,0122,0124,0126,0128,012A,012C,012E,0130,0132,0134,0136,0139,013B,013D,013F,0141,0143,0145,0147,014A,014C,014E,0150,0152,0154,0156,0158,015A,015C,015E,0160,0162,0164,0166,0168,016A,016C,016E,0170,0172,0174,0176,0178,0179,017B,017D,0181,0182,0184,0186,0187,0189,018A,018B,018E,018F,0190,0191,0193,0194,0196,0197,0198,019C,019D,019F,01A0,01A2,01A4,01A6,01A7,01A9,01AC,01AE,01AF,01B1,01B2,01B3,01B5,01B7,01B8,01BC,01C4,01C7,01CA,01CD,01CF,01D1,01D3,01D5,01D7,01D9,01DB,01DE,01E0,01E2,01E4,01E6,01E8,01EA,01EC,01EE,01F1,01F4,01F6,01F7,01F8,01FA,01FC,01FE,0200,0202,0204,0206,0208,020A,020C,020E,0210,0212,0214,0216,0218,021A,021C,021E,0220,0222,0224,0226,0228,022A,022C,022E,0230,0232,023A,023B,023D,023E,0241,0243,0244,0245,0246,0248,024A,024C,024E,0370,0372,0376,037F,0386,0388,0389,038A,038C,038E,038F,0391,0392,0393,0394,0395,0396,0397,0398-039F,03A0,03A1,03A3,03A4,03A5,03A6,03A7,03A8,03A9,03AA,03AB,03CF,03D2,03D3,03D4,03D8,03DA,03DC,03DE,03E0,03E2,03E4,03E6,03E8,03EA,03EC,03EE,03F4,03F7,03F9,03FA,03FD,03FE,03FF,0400-0407,0408-040F,0410-0417,0418-041F,0420-0427,0428-042F,0460,0462,0464,0466,0468,046A,046C,046E,0470,0472,0474,0476,0478,047A,047C,047E,0480,048A,048C,048E,0490,0492,0494,0496,0498,049A,049C,049E,04A0,04A2,04A4,04A6,04A8,04AA,04AC,04AE,04B0,04B2,04B4,04B6,04B8,04BA,04BC,04BE,04C0,04C1,04C3,04C5,04C7,04C9,04CB,04CD,04D0,04D2,04D4,04D6,04D8,04DA,04DC,04DE,04E0,04E2,04E4,04E6,04E8,04EA,04EC,04EE,04F0,04F2,04F4,04F6,04F8,04FA,04FC,04FE,0500,0502,0504,0506,0508,050A,050C,050E,0510,0512,0514,0516,0518,051A,051C,051E,0520,0522,0524,0526,0528,052A,052C,052E,0531,0532,0533,0534,0535,0536,0537,0538-053F,0540-0547,0548-054F,0550,0551,0552,0553,0554,0555,0556,10A0-10A7,10A8-10AF,10B0-10B7,10B8-10BF,10C0,10C1,10C2,10C3,10C4,10C5,10C7,10CD,13A0-13A7,13A8-13AF,13B0-13B7,13B8-13BF,13C0-13C7,13C8-13CF,13D0-13D7,13D8-13DF,13E0-13E7,13E8-13EF,13F0,13F1,13F2,13F3,13F4,13F5,1C90-1C97,1C98-1C9F,1CA0-1CA7,1CA8-1CAF,1CB0-1CB7,1CB8,1CB9,1CBA,1CBD,1CBE,1CBF,1E00,1E02,1E04,1E06,1E08,1E0A,1E0C,1E0E,1E10,1E12,1E14,1E16,1E18,1E1A,1E1C,1E1E,1E20,1E22,1E24,1E26,1E28,1E2A,1E2C,1E2E,1E30,1E32,1E34,1E36,1E38,1E3A,1E3C,1E3E,1E40,1E42,1E44,1E46,1E48,1E4A,1E4C,1E4E,1E50,1E52,1E54,1E56,1E58,1E5A,1E5C,1E5E,1E60,1E62,1E64,1E66,1E68,1E6A,1E6C,1E6E,1E70,1E72,1E74,1E76,1E78,1E7A,1E7C,1E7E,1E80,1E82,1E84,1E86,1E88,1E8A,1E8C,1E8E,1E90,1E92,1E94,1E9E,1EA0,1EA2,1EA4,1EA6,1EA8,1EAA,1EAC,1EAE,1EB0,1EB2,1EB4,1EB6,1EB8,1EBA,1EBC,1EBE,1EC0,1EC2,1EC4,1EC6,1EC8,1ECA,1ECC,1ECE,1ED0,1ED2,1ED4,1ED6,1ED8,1EDA,1EDC,1EDE,1EE0,1EE2,1EE4,1EE6,1EE8,1EEA,1EEC,1EEE,1EF0,1EF2,1EF4,1EF6,1EF8,1EFA,1EFC,1EFE,1F08-1F0F,1F18,1F19,1F1A,1F1B,1F1C,1F1D,1F28-1F2F,1F38-1F3F,1F48,1F49,1F4A,1F4B,1F4C,1F4D,1F59,1F5B,1F5D,1F5F,1F68-1F6F,1FB8,1FB9,1FBA,1FBB,1FC8,1FC9,1FCA,1FCB,1FD8,1FD9,1FDA,1FDB,1FE8,1FE9,1FEA,1FEB,1FEC,1FF8,1FF9,1FFA,1FFB,"

// Lt
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Lt}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )
"01C5,01C8,01CB,01F2,1F88-1F8F,1F98-1F9F,1FA8-1FAF,1FBC,1FCC,1FFC,"

// Lm
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Lm}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )
"02B0-02B7,02B8-02BF,02C0,02C1,02C6,02C7,02C8-02CF,02D0,02D1,02E0,02E1,02E2,02E3,02E4,02EC,02EE,0374,037A,0559,0640,06E5,06E6,07F4,07F5,07FA,081A,0824,0828,08C9,0971,0E46,0EC6,10FC,17D7,1843,1AA7,1C78,1C79,1C7A,1C7B,1C7C,1C7D,1D2C,1D2D,1D2E,1D2F,1D30-1D37,1D38-1D3F,1D40-1D47,1D48-1D4F,1D50-1D57,1D58-1D5F,1D60-1D67,1D68,1D69,1D6A,1D78,1D9B,1D9C,1D9D,1D9E,1D9F,1DA0-1DA7,1DA8-1DAF,1DB0-1DB7,1DB8-1DBF,"

// Lo
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Lo}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )
"00AA,00BA,01BB,01C0,01C1,01C2,01C3,0294,05D0-05D7,05D8-05DF,05E0-05E7,05E8,05E9,05EA,05EF,05F0,05F1,05F2,0620-0627,0628-062F,0630-0637,0638-063F,0641,0642,0643,0644,0645,0646,0647,0648,0649,064A,066E,066F,0671,0672,0673,0674,0675,0676,0677,0678-067F,0680-0687,0688-068F,0690-0697,0698-069F,06A0-06A7,06A8-06AF,06B0-06B7,06B8-06BF,06C0-06C7,06C8-06CF,06D0,06D1,06D2,06D3,06D5,06EE,06EF,06FA,06FB,06FC,06FF,0710,0712,0713,0714,0715,0716,0717,0718-071F,0720-0727,0728-072F,074D,074E,074F,0750-0757,0758-075F,0760-0767,0768-076F,0770-0777,0778-077F,0780-0787,0788-078F,0790-0797,0798-079F,07A0,07A1,07A2,07A3,07A4,07A5,07B1,07CA,07CB,07CC,07CD,07CE,07CF,07D0-07D7,07D8-07DF,07E0-07E7,07E8,07E9,07EA,0800-0807,0808-080F,0810,0811,0812,0813,0814,0815,0840-0847,0848-084F,0850-0857,0858,0860-0867,0868,0869,086A,0870-0877,0878-087F,0880-0887,0889,088A,088B,088C,088D,088E,08A0-08A7,08A8-08AF,08B0-08B7,08B8-08BF,08C0-08C7,08C8,0904,0905,0906,0907,0908-090F,0910-0917,0918-091F,0920-0927,0928-092F,0930-0937,0938,0939,093D,0950,0958-095F,0960,0961,0972,0973,0974,0975,0976,0977,0978-097F,0980,0985,0986,0987,0988,0989,098A,098B,098C,098F,0990,0993,0994,0995,0996,0997,0998-099F,09A0-09A7,09A8,09AA,09AB,09AC,09AD,09AE,09AF,09B0,09B2,09B6,09B7,09B8,09B9,09BD,09CE,09DC,09DD,09DF,09E0,09E1,09F0,09F1,09FC,0A05,0A06,0A07,0A08,0A09,0A0A,0A0F,0A10,0A13,0A14,0A15,0A16,0A17,0A18-0A1F,0A20-0A27,0A28,0A2A,0A2B,0A2C,0A2D,0A2E,0A2F,0A30,0A32,0A33,0A35,0A36,0A38,0A39,0A59,0A5A,0A5B,0A5C,0A5E,0A72,0A73,0A74,0A85,0A86,0A87,0A88,0A89,0A8A,0A8B,0A8C,0A8D,0A8F,0A90,0A91,0A93,0A94,0A95,0A96,0A97,0A98-0A9F,0AA0-0AA7,0AA8,0AAA,0AAB,0AAC,0AAD,0AAE,0AAF,0AB0,0AB2,0AB3,0AB5,0AB6,0AB7,0AB8,0AB9,0ABD,0AD0,0AE0,0AE1,0AF9,0B05,0B06,0B07,0B08,0B09,0B0A,0B0B,0B0C,0B0F,0B10,0B13,0B14,0B15,0B16,0B17,0B18-0B1F,0B20-0B27,0B28,0B2A,0B2B,0B2C,0B2D,0B2E,0B2F,0B30,0B32,0B33,0B35,0B36,0B37,0B38,0B39,0B3D,0B5C,0B5D,0B5F,0B60,0B61,0B71,0B83,0B85,0B86,0B87,0B88,0B89,0B8A,0B8E,0B8F,0B90,0B92,0B93,0B94,0B95,0B99,0B9A,0B9C,0B9E,0B9F,0BA3,0BA4,0BA8,0BA9,0BAA,0BAE,0BAF,0BB0-0BB7,0BB8,0BB9,0BD0,0C05,0C06,0C07,0C08,0C09,0C0A,0C0B,0C0C,0C0E,0C0F,0C10,0C12,0C13,0C14,0C15,0C16,0C17,0C18-0C1F,0C20-0C27,0C28,0C2A,0C2B,0C2C,0C2D,0C2E,0C2F,0C30-0C37,0C38,0C39,0C3D,0C58,0C59,0C5A,0C5D,0C60,0C61,0C80,0C85,0C86,0C87,0C88,0C89,0C8A,0C8B,0C8C,0C8E,0C8F,0C90,0C92,0C93,0C94,0C95,0C96,0C97,0C98-0C9F,0CA0-0CA7,0CA8,0CAA,0CAB,0CAC,0CAD,0CAE,0CAF,0CB0,0CB1,0CB2,0CB3,0CB5,0CB6,0CB7,0CB8,0CB9,0CBD,0CDD,0CDE,0CE0,0CE1,0CF1,0CF2,0D04,0D05,0D06,0D07,0D08,0D09,0D0A,0D0B,0D0C,0D0E,0D0F,0D10,0D12,0D13,0D14,0D15,0D16,0D17,0D18-0D1F,0D20-0D27,0D28-0D2F,0D30-0D37,0D38,0D39,0D3A,0D3D,0D4E,0D54,0D55,0D56,0D5F,0D60,0D61,0D7A,0D7B,0D7C,0D7D,0D7E,0D7F,0D85,0D86,0D87,0D88-0D8F,0D90,0D91,0D92,0D93,0D94,0D95,0D96,0D9A,0D9B,0D9C,0D9D,0D9E,0D9F,0DA0-0DA7,0DA8-0DAF,0DB0,0DB1,0DB3,0DB4,0DB5,0DB6,0DB7,0DB8,0DB9,0DBA,0DBB,0DBD,0DC0,0DC1,0DC2,0DC3,0DC4,0DC5,0DC6,0E01,0E02,0E03,0E04,0E05,0E06,0E07,0E08-0E0F,0E10-0E17,0E18-0E1F,0E20-0E27,0E28-0E2F,0E30,0E32,0E33,0E40,0E41,0E42,0E43,0E44,0E45,0E81,0E82,0E84,0E86,0E87,0E88,0E89,0E8A,0E8C,0E8D,0E8E,0E8F,0E90-0E97,0E98-0E9F,0EA0,0EA1,0EA2,0EA3,0EA5,0EA7,0EA8-0EAF,0EB0,0EB2,0EB3,0EBD,0EC0,0EC1,0EC2,0EC3,0EC4,0EDC,0EDD,0EDE,0EDF,0F00,0F40-0F47,0F49,0F4A,0F4B,0F4C,0F4D,0F4E,0F4F,0F50-0F57,0F58-0F5F,0F60-0F67,0F68,0F69,0F6A,0F6B,0F6C,0F88,0F89,0F8A,0F8B,0F8C,1000-1007,1008-100F,1010-1017,1018-101F,1020-1027,1028,1029,102A,103F,1050,1051,1052,1053,1054,1055,105A,105B,105C,105D,1061,1065,1066,106E,106F,1070,1075,1076,1077,1078-107F,1080,1081,108E,1100-1107,1108-110F,1110-1117,1118-111F,1120-1127,1128-112F,1130-1137,1138-113F,1140-1147,1148-114F,1150-1157,1158-115F,1160-1167,1168-116F,1170-1177,1178-117F,1180-1187,1188-118F,1190-1197,1198-119F,11A0-11A7,11A8-11AF,11B0-11B7,11B8-11BF,11C0-11C7,11C8-11CF,11D0-11D7,11D8-11DF,11E0-11E7,11E8-11EF,11F0-11F7,11F8-11FF,1200-1207,1208-120F,1210-1217,1218-121F,1220-1227,1228-122F,1230-1237,1238-123F,1240-1247,1248,124A,124B,124C,124D,1250,1251,1252,1253,1254,1255,1256,1258,125A,125B,125C,125D,1260-1267,1268-126F,1270-1277,1278-127F,1280-1287,1288,128A,128B,128C,128D,1290-1297,1298-129F,12A0-12A7,12A8-12AF,12B0,12B2,12B3,12B4,12B5,12B8,12B9,12BA,12BB,12BC,12BD,12BE,12C0,12C2,12C3,12C4,12C5,12C8-12CF,12D0,12D1,12D2,12D3,12D4,12D5,12D6,12D8-12DF,12E0-12E7,12E8-12EF,12F0-12F7,12F8-12FF,1300-1307,1308-130F,1310,1312,1313,1314,1315,1318-131F,1320-1327,1328-132F,1330-1337,1338-133F,1340-1347,1348-134F,1350-1357,1358,1359,135A,1380-1387,1388-138F,1401,1402,1403,1404,1405,1406,1407,1408-140F,1410-1417,1418-141F,1420-1427,1428-142F,1430-1437,1438-143F,1440-1447,1448-144F,1450-1457,1458-145F,1460-1467,1468-146F,1470-1477,1478-147F,1480-1487,1488-148F,1490-1497,1498-149F,14A0-14A7,14A8-14AF,14B0-14B7,14B8-14BF,14C0-14C7,14C8-14CF,14D0-14D7,14D8-14DF,14E0-14E7,14E8-14EF,14F0-14F7,14F8-14FF,1500-1507,1508-150F,1510-1517,1518-151F,1520-1527,1528-152F,1530-1537,1538-153F,1540-1547,1548-154F,1550-1557,1558-155F,1560-1567,1568-156F,1570-1577,1578-157F,1580-1587,1588-158F,1590-1597,1598-159F,15A0-15A7,15A8-15AF,15B0-15B7,15B8-15BF,15C0-15C7,15C8-15CF,15D0-15D7,15D8-15DF,15E0-15E7,15E8-15EF,15F0-15F7,15F8-15FF,1600-1607,1608-160F,1610-1617,1618-161F,1620-1627,1628-162F,1630-1637,1638-163F,1640-1647,1648-164F,1650-1657,1658-165F,1660-1667,1668,1669,166A,166B,166C,166F,1670-1677,1678-167F,1681,1682,1683,1684,1685,1686,1687,1688-168F,1690-1697,1698,1699,169A,16A0-16A7,16A8-16AF,16B0-16B7,16B8-16BF,16C0-16C7,16C8-16CF,16D0-16D7,16D8-16DF,16E0-16E7,16E8,16E9,16EA,16F1,16F2,16F3,16F4,16F5,16F6,16F7,16F8,1700-1707,1708-170F,1710,1711,171F,1720-1727,1728-172F,1730,1731,1740-1747,1748-174F,1750,1751,1760-1767,1768,1769,176A,176B,176C,176E,176F,1770,1780-1787,1788-178F,1790-1797,1798-179F,17A0-17A7,17A8-17AF,17B0,17B1,17B2,17B3,17DC,1820-1827,1828-182F,1830-1837,1838-183F,1840,1841,1842,1844,1845,1846,1847,1848-184F,1850-1857,1858-185F,1860-1867,1868-186F,1870-1877,1878,1880,1881,1882,1883,1884,1887,1888-188F,1890-1897,1898-189F,18A0-18A7,18A8,18AA,18B0-18B7,18B8-18BF,18C0-18C7,18C8-18CF,18D0-18D7,18D8-18DF,18E0-18E7,18E8-18EF,18F0,18F1,18F2,18F3,18F4,18F5,1900-1907,1908-190F,1910-1917,1918,1919,191A,191B,191C,191D,191E,1950-1957,1958-195F,1960-1967,1968,1969,196A,196B,196C,196D,1970,1971,1972,1973,1974,1980-1987,1988-198F,1990-1997,1998-199F,19A0-19A7,19A8,19A9,19AA,19AB,19B0-19B7,19B8-19BF,19C0-19C7,19C8,19C9,1A00-1A07,1A08-1A0F,1A10,1A11,1A12,1A13,1A14,1A15,1A16,1A20-1A27,1A28-1A2F,1A30-1A37,1A38-1A3F,1A40-1A47,1A48-1A4F,1A50,1A51,1A52,1A53,1A54,1B05,1B06,1B07,1B08-1B0F,1B10-1B17,1B18-1B1F,1B20-1B27,1B28-1B2F,1B30,1B31,1B32,1B33,1B45,1B46,1B47,1B48,1B49,1B4A,1B4B,1B4C,1B83,1B84,1B85,1B86,1B87,1B88-1B8F,1B90-1B97,1B98-1B9F,1BA0,1BAE,1BAF,1BBA,1BBB,1BBC,1BBD,1BBE,1BBF,1BC0-1BC7,1BC8-1BCF,1BD0-1BD7,1BD8-1BDF,1BE0,1BE1,1BE2,1BE3,1BE4,1BE5,1C00-1C07,1C08-1C0F,1C10-1C17,1C18-1C1F,1C20,1C21,1C22,1C23,1C4D,1C4E,1C4F,1C5A,1C5B,1C5C,1C5D,1C5E,1C5F,1C60-1C67,1C68-1C6F,1C70-1C77,1CE9,1CEA,1CEB,1CEC,1CEE,1CEF,1CF0,1CF1,1CF2,1CF3,1CF5,1CF6,1CFA,"

// M
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{M}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )

// Mn
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Mn}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )

// Mc
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Mc}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )

// Me
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Me}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )

// N
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{N}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )
"0030-0037,0038,0039,00B2,00B3,00B9,00BC,00BD,00BE,0660-0667,0668,0669,06F0-06F7,06F8,06F9,07C0-07C7,07C8,07C9,0966,0967,0968-096F,09E6,09E7,09E8-09EF,09F4,09F5,09F6,09F7,09F8,09F9,0A66,0A67,0A68-0A6F,0AE6,0AE7,0AE8-0AEF,0B66,0B67,0B68-0B6F,0B72,0B73,0B74,0B75,0B76,0B77,0BE6,0BE7,0BE8-0BEF,0BF0,0BF1,0BF2,0C66,0C67,0C68-0C6F,0C78,0C79,0C7A,0C7B,0C7C,0C7D,0C7E,0CE6,0CE7,0CE8-0CEF,0D58,0D59,0D5A,0D5B,0D5C,0D5D,0D5E,0D66,0D67,0D68-0D6F,0D70-0D77,0D78,0DE6,0DE7,0DE8-0DEF,0E50-0E57,0E58,0E59,0ED0-0ED7,0ED8,0ED9,0F20-0F27,0F28-0F2F,0F30,0F31,0F32,0F33,1040-1047,1048,1049,1090-1097,1098,1099,1369,136A,136B,136C,136D,136E,136F,1370-1377,1378,1379,137A,137B,137C,16EE,16EF,16F0,17E0-17E7,17E8,17E9,17F0-17F7,17F8,17F9,1810-1817,1818,1819,1946,1947,1948-194F,19D0-19D7,19D8,19D9,19DA,1A80-1A87,1A88,1A89,1A90-1A97,1A98,1A99,1B50-1B57,1B58,1B59,1BB0-1BB7,1BB8,1BB9,1C40-1C47,1C48,1C49,1C50-1C57,1C58,1C59,"

// Nd
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Nd}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )
"0030-0037,0038,0039,0660-0667,0668,0669,06F0-06F7,06F8,06F9,07C0-07C7,07C8,07C9,0966,0967,0968-096F,09E6,09E7,09E8-09EF,0A66,0A67,0A68-0A6F,0AE6,0AE7,0AE8-0AEF,0B66,0B67,0B68-0B6F,0BE6,0BE7,0BE8-0BEF,0C66,0C67,0C68-0C6F,0CE6,0CE7,0CE8-0CEF,0D66,0D67,0D68-0D6F,0DE6,0DE7,0DE8-0DEF,0E50-0E57,0E58,0E59,0ED0-0ED7,0ED8,0ED9,0F20-0F27,0F28,0F29,1040-1047,1048,1049,1090-1097,1098,1099,17E0-17E7,17E8,17E9,1810-1817,1818,1819,1946,1947,1948-194F,19D0-19D7,19D8,19D9,1A80-1A87,1A88,1A89,1A90-1A97,1A98,1A99,1B50-1B57,1B58,1B59,1BB0-1BB7,1BB8,1BB9,1C40-1C47,1C48,1C49,1C50-1C57,1C58,1C59,"

// Nl
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Nl}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )
"16EE,16EF,16F0,"

// No
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{No}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )

// P
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{P}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )
"0021,0022,0023,0025,0026,0027,0028,0029,002A,002C,002D,002E,002F,003A,003B,003F,0040,005B,005C,005D,005F,007B,007D,00A1,00A7,00AB,00B6,00B7,00BB,00BF,037E,0387,055A,055B,055C,055D,055E,055F,0589,058A,05BE,05C0,05C3,05C6,05F3,05F4,0609,060A,060C,060D,061B,061D,061E,061F,066A,066B,066C,066D,06D4,0700-0707,0708,0709,070A,070B,070C,070D,07F7,07F8,07F9,0830-0837,0838,0839,083A,083B,083C,083D,083E,085E,0964,0965,0970,09FD,0A76,0AF0,0C77,0C84,0DF4,0E4F,0E5A,0E5B,0F04,0F05,0F06,0F07,0F08-0F0F,0F10,0F11,0F12,0F14,0F3A,0F3B,0F3C,0F3D,0F85,0FD0,0FD1,0FD2,0FD3,0FD4,0FD9,0FDA,104A,104B,104C,104D,104E,104F,10FB,1360-1367,1368,1400,166E,169B,169C,16EB,16EC,16ED,1735,1736,17D4,17D5,17D6,17D8,17D9,17DA,1800-1807,1808,1809,180A,1944,1945,1A1E,1A1F,1AA0,1AA1,1AA2,1AA3,1AA4,1AA5,1AA6,1AA8,1AA9,1AAA,1AAB,1AAC,1AAD,1B5A,1B5B,1B5C,1B5D,1B5E,1B5F,1B60,1B7D,1B7E,1BFC,1BFD,1BFE,1BFF,1C3B,1C3C,1C3D,1C3E,1C3F,1C7E,1C7F,1CC0-1CC7,1CD3,"

// Pc
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Pc}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )

// Pd
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Pd}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )

// Ps
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Ps}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )

// Pe
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Pe}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )

// Pi
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Pi}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )

// Pf
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Pf}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )

// Po
>> Concat( ForAll( Sequence( 1024 ) As Outer, With( { s: Concat( ForAll( Sequence( 8, 0 ) As Inner, 
  If( IsMatch( UniChar(Outer.Value*8+Inner.Value), "\p{Po}" ), Dec2Hex( Outer.Value*8+Inner.Value, 4 ) & ",", "" ) ), Value ) }, 
  If( Len(s) = 40, Dec2Hex( Outer.Value*8, 4 ) & "-" & Dec2Hex(Outer.Value*8+7,4) & ",", s ) ) ), Value )
